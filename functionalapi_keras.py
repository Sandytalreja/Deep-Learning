# -*- coding: utf-8 -*-
"""FunctionalAPI_keras.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ddUUg5STFYgIEnx21nnVXXAw8QpOe-YJ

Use the Keras Functional API to build a simple neural network model.

    Create an input layer, add hidden layers, and define an output layer using the Functional API.

**Step 1 : Importing Necessary Libraries**
"""

# Install TensorFlow
!pip install TensorFlow

import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import BatchNormalization, Dropout, Input, Dense
import warnings
warnings.filterwarnings('ignore', category=UserWarning, module='tensorflow')

"""**Step 2 : Define the Input Layer**"""

input_layer = Input(shape = (20,))
print(input_layer)

"""**Step 3 : Add Hidden Layers**

"""

hidden_layer1 = Dense(63, activation='relu')(input_layer)
dropout1 = Dropout(rate = 0.5)(hidden_layer1)
batch_norms = BatchNormalization()(dropout1)
hidden_layer2 = Dense(64, activation='relu')(batch_norms)
dropout2 = Dropout(rate=0.5)(hidden_layer2)
batch_norms2 = BatchNormalization()(dropout2)

"""**Step 4: Define the output Layer**"""

output_layer = Dense(1, activation='sigmoid')(batch_norms2)

"""**Step 5 : Create the model**"""

model = Model(inputs=input_layer, outputs= output_layer)
model.summary()

"""**Step 6 : Compile the Model**"""

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

"""**Step 7 : Train the Model**"""

import numpy as np
X_train = np.random.rand(1000, 20)
Y_train = np.random.randint(2, size=(1000, 1))
model.fit(X_train, Y_train, epochs=50,batch_size=32)

"""**Step 8 : Evaluate the Model**"""

x_test = np.random.rand(200, 20)
y_test = np.random.randint(2, size=(200,1))
loss, accuracy = model.evaluate(x_test, y_test)

print(f'Test Loss: {loss}')
print(f'Test Accuracy: {accuracy}')